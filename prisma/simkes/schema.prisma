generator client {
  provider      = "prisma-client-js"
  output        = "../generated/simkes"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("SIMKES_DATABASE_URL")
}

model EmergencyRequest {
  id              String             @id @default(uuid())
  patientIdentity String
  location        String
  note            String?
  status          EmergencyStatus    @default(PENDING)
  assignedToId    String?
  assignedTo      AmbulanceStaff?    @relation(fields: [assignedToId], references: [id])
  histories       EmergencyHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmergencyHistory {
  id                     String          @id @default(uuid())
  emergencyRequestId     String
  ambulanceStaffLocation String?
  status                 EmergencyStatus
  note                   String?
  createdAt              DateTime        @default(now())

  emergencyRequest EmergencyRequest @relation(fields: [emergencyRequestId], references: [id])
}

model AmbulanceStaff {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EmergencyRequest EmergencyRequest[]
}

enum EmergencyStatus {
  PENDING
  ASSIGNED
  ON_THE_WAY
  ARRIVED
  PATIENT_IN_CAR
  TO_HOSPITAL
  COMPLETED
}

model ReservationQRCode {
  id            String   @id @default(uuid())
  reservationId String   @unique
  qrCodeUrl     String
  qrCodeContent String
  filePath      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model HospitalLocation {
  id        String   @id @default(uuid())
  name      String
  latitude  Float
  longitude Float
  address   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DoctorRating {
  id            String   @id @default(uuid())
  reservationId String   @unique
  doctorId      Int
  patientId     String
  rating        Int      @db.SmallInt // Nilai rating 1-5
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([doctorId])
  @@index([patientId])
}

model UnitRating {
  id            String   @id @default(uuid())
  reservationId String   @unique
  unitId        Int
  patientId     String
  rating        Int      @db.SmallInt // Nilai rating 1-5
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([unitId])
  @@index([patientId])
}

model Facility {
  id          String           @id @default(uuid())
  name        String
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  photos      FacilityPhoto[]
  ratings     FacilityRating[]
}

model FacilityRating {
  id            String   @id @default(uuid())
  reservationId String
  facilityId    String
  patientId     String
  rating        Int      @db.SmallInt // Nilai rating 1-5
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  facility Facility @relation(fields: [facilityId], references: [id])

  @@unique([reservationId, facilityId])
  @@index([facilityId])
  @@index([patientId])
  @@index([reservationId])
}

model FacilityPhoto {
  id         String   @id @default(uuid())
  facilityId String
  photoUrl   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  facility Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  @@index([facilityId])
}

model Post {
  id         String   @id @default(uuid())
  title      String
  content    String
  authorId   String // ID pengguna yang membuat postingan
  authorName String // Nama pengguna yang membuat postingan
  photoUrl   String? // URL foto postingan (opsional)
  isActive   Boolean  @default(true) // true = aktif, false = tidak aktif
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Gallery {
  id          String         @id @default(uuid())
  title       String
  description String?
  isActive    Boolean        @default(true) // true = aktif, false = tidak aktif
  photos      GalleryPhoto[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model GalleryPhoto {
  id        String   @id @default(uuid())
  galleryId String
  photoUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gallery Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@index([galleryId])
}

model Banner {
  id          String   @id @default(uuid())
  title       String
  description String?
  imageUrl    String
  order       Int      @default(0) // Untuk mengurutkan banner
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Nurse {
  id          String          @id @default(uuid())
  name        String
  speciality  String?
  description String?
  photoUrl    String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  schedules   NurseSchedule[]
  ratings     NurseRating[]
}

model NurseSchedule {
  id        String   @id @default(uuid())
  nurseId   String
  dayOfWeek Int      @db.SmallInt // 0 = Minggu, 1 = Senin, dst
  startTime String   // Format: HH:mm
  endTime   String   // Format: HH:mm
  quota     Int      @default(10)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nurse Nurse @relation(fields: [nurseId], references: [id])

  @@index([nurseId])
  @@index([dayOfWeek])
}

model NurseRating {
  id            String   @id @default(uuid())
  reservationId String
  nurseId       String
  patientId     String
  rating        Int      @db.SmallInt // Nilai rating 1-5
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  nurse Nurse @relation(fields: [nurseId], references: [id])

  @@index([nurseId])
  @@index([patientId])
  @@index([reservationId])
  @@unique([reservationId, nurseId])
}
