generator client {
  provider      = "prisma-client-js"
  output        = "../generated/simkes"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("SIMKES_DATABASE_URL")
}

model EmergencyRequest {
  id           String             @id @default(uuid())
  patientId    String
  location     String
  note         String?
  status       EmergencyStatus    @default(PENDING)
  assignedToId String?
  assignedTo   AmbulanceStaff?    @relation(fields: [assignedToId], references: [id])
  histories    EmergencyHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmergencyHistory {
  id                     String          @id @default(uuid())
  emergencyRequestId     String
  ambulanceStaffLocation String?
  status                 EmergencyStatus
  note                   String?
  createdAt              DateTime        @default(now())

  emergencyRequest EmergencyRequest @relation(fields: [emergencyRequestId], references: [id])
}

model AmbulanceStaff {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EmergencyRequest EmergencyRequest[]
}

enum EmergencyStatus {
  PENDING
  ASSIGNED
  ON_THE_WAY
  ARRIVED
  PATIENT_IN_CAR
  TO_HOSPITAL
  COMPLETED
}

model ReservationQRCode {
  id            String   @id @default(uuid())
  reservationId String   @unique
  qrCodeUrl     String
  qrCodeContent String
  filePath      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model HospitalLocation {
  id        String   @id @default(uuid())
  name      String
  latitude  Float
  longitude Float
  address   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DoctorRating {
  id            String   @id @default(uuid())
  reservationId String   @unique
  doctorId      Int
  patientId     String
  rating        Int      @db.SmallInt // Nilai rating 1-5
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([doctorId])
  @@index([patientId])
}

model UnitRating {
  id            String   @id @default(uuid())
  reservationId String   @unique
  unitId        Int
  patientId     String
  rating        Int      @db.SmallInt // Nilai rating 1-5
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([unitId])
  @@index([patientId])
}

model Facility {
  id          String         @id @default(uuid())
  name        String
  description String?
  status      Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  photos      FacilityPhoto[]
}

model FacilityPhoto {
  id         String   @id @default(uuid())
  facilityId String
  photoUrl   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  
  @@index([facilityId])
}
